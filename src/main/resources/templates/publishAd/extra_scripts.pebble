<script src="/load-image.js"></script>
{% verbatim %}
    <script>
        const inputPicturesPreview = document.getElementById('input_pictures_preview')
        Sortable.create(inputPicturesPreview, {
            animation: 150,
            delay: 100,
            delayOnTouchOnly: true,
            draggable: '.draggable-item',
        })

        const inputPicturePreviewTemplate = document.getElementById('input_picture_preview_template')

        const inputPictures = document.getElementById('input_pictures')
        inputPictures.onchange = onChange => {
            inputPicturesPreview.innerHTML = '';
            [...onChange.target.files].slice(0, onChange.target.maxLength).forEach(file => {
                const reader = new FileReader()
                reader.onload = onLoad => {
                    createImagePreview({
                        container: inputPicturesPreview,
                        template: inputPicturePreviewTemplate,
                        src: onLoad.target.result,
                        file
                    })
                }
                reader.readAsDataURL(file)
            })
        }

        function createImagePreview({container, template, src, file}) {
            container.innerHTML += template.innerHTML.replace('{{ src }}', src).replace('{{ name }}', file.name)
        }

        document.querySelectorAll('[data-behaviour=length][data-for]')
            .forEach(component => {
                const input = document.getElementById(component.dataset.for)
                const maxLength = input.maxLength
                const current = input.value.trim().length

                component.innerText = current + '/' + maxLength
                input.addEventListener('input', onInput => {
                    const target = onInput.target
                    const minLength = target.minLength || 0
                    const maxLength = target.maxLength
                    const current = target.value.trim().length

                    component.innerText = current + '/' + maxLength
                    component.classList.remove('text-muted', 'text-success', 'text-error', 'text-warning')
                    if (current < minLength) component.classList.add('text-warning')
                    else if (current > maxLength) component.classList.add('text-error')
                    else component.classList.add('text-success')
                })
            })


        const formPublish = document.getElementById('form_publish')
        formPublish.addEventListener('submit', async (onSubmit) => {
            onSubmit.preventDefault()

            const pictures = document.getElementById('input_pictures')
            pictures.disabled = true
            const pictureNames = [...document.querySelectorAll('.pictures-container .picture-container')]
              .map(container => container.dataset.name)

            const formData = new FormData(onSubmit.target)
            onSubmit.target.disabled = true
            onSubmit.target.classList.add('form-loading')
            for (const pictureName of pictureNames) {
                const file = fileByNameFrom(pictures.files, pictureName)
                const scaled = await loadImage(file, {maxWidth: 1920, maxHeight: 1920, canvas: true})
                const blob = await new Promise(resolve => scaled.image.toBlob(data => resolve(data), 'image/jpeg'))
                formData.append('pictures', blob, pictureName)
            }

            const request = new XMLHttpRequest()
            request.open('POST', '/api/v1/ads')
            request.send(formData)
            request.onreadystatechange = onSubmitReadyStateChangeWith(request, onSubmit)
            request.onerror = onSubmitError
            return false
        })

        function onSubmitReadyStateChangeWith(request, onSubmit) {
            return () => {
                if (request.readyState === XMLHttpRequest.DONE) {
                    if (httpStatusIsSuccess(request.status)) {
                        const content = document.getElementById('insertion-content')
                        content.innerHTML = document.getElementById('success-content').innerHTML
                    } else {
                        onSubmit.target.disabled = false
                        onSubmit.target.classList.remove('form-loading')
                    }
                }
            }
        }

        function onSubmitError(onSubmit) {
            onSubmit.target.disabled = false
            onSubmit.target.classList.remove('form-loading')
        }

        function httpStatusIsSuccess(status) {
            return status >= 200 && status <= 299
        }

        function fileByNameFrom(files, name) {
            for(const file of files) {
                if (file.name === name) return file
            }
            return null
        }
    </script>
{% endverbatim %}
